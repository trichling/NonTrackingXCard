@page "/customer/scanvendor"

@using NonTrackingCustomerCard.Client.Contracts
@inject IJSRuntime JS
@inject NavigationManager Navigation

<NavigationLock ConfirmExternalNavigation="false" OnBeforeInternalNavigation="@OnBeforeInternalNavigation"></NavigationLock>

<h3>Kundenkarte anlegen</h3>

@if (vendorValidityState == ValidityState.NoSignature)
{
    <div class="alert alert-danger">
        <span class="icon-danger">Der Barcode des Händlers ist nicht korrekt.</span> 
    </div>
}

<video id="qrScanner"></video>

<p>
    <NavLink href="/customer/backup/restore">Daten widerherstellen</NavLink>
</p>

<style>
     .alert {
        padding: 15px;
        margin-top: 10px;
        border-radius: 5px;
        display: flex;
        align-items: center;
    }
    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }
    .icon-error::before {
        content: "❌";
        margin-right: 10px;
    }
</style>

@code {

    private CustomerDataWithSignature customer;
    private CustomerOfVendorData customerOfVendor;
    private ValidityState vendorValidityState = ValidityState.ValidSignature;

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("qrScanHelper.startScan", DotNetObjectReference.Create(this));
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        await JS.InvokeVoidAsync("qrScanHelper.stopScan", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task OnQrCodeScanned(string qrCodeData)
    {
        await JS.InvokeVoidAsync("qrScanHelper.stopScan", DotNetObjectReference.Create(this));

        Console.WriteLine($"Original QR Code Data: {qrCodeData}");

        // Ensure the string is properly formatted
        var json = qrCodeData.Trim().Trim('\'').Replace("'", "\"");
        Console.WriteLine($"Formatted JSON: {json}");

        try
        {
            var vendorPublicData = System.Text.Json.JsonSerializer.Deserialize<VendorPublicData>(json, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (string.IsNullOrWhiteSpace(vendorPublicData.Name) || string.IsNullOrWhiteSpace(vendorPublicData.PublicKey))
            {
                vendorValidityState = ValidityState.NoSignature;
                StateHasChanged();
                return;
            }

            var customer = new CustomerOfVendorData
            {
                Customer = new CustomerData
                {
                    Points = 0
                },
                OfVendor = vendorPublicData
            };

            // Save customer data to local storage
            var customerJson = System.Text.Json.JsonSerializer.Serialize(customer);
            await JS.InvokeVoidAsync("localStorage.setItem", "NonTrackingCustomerCard.Client.Customer", customerJson);

            Navigation.NavigateTo("/customer");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Deserialization failed: {ex.Message}");
        }
    }
}