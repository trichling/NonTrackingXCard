@page "/vendor/create"
@using System.Security.Cryptography
@using NonTrackingCustomerCard.Client.Contracts

@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Als Händler registrieren</h3>

@if (vendorLicenseState == ValidityState.InvalidSignature)
{
    <div class="alert alert-danger">
        <span class="icon-error">Der angegebene Lizenzschlüssel ist ungültig.</span> 
    </div>
}

<label for="name">Name:</label> <br />
<input id="name" @bind="inputName" placeholder="Name" />
<br />
<label for="signedName">Lizenzschlüssel:</label> <br />
<textarea id="signedName" @bind="signedInputName" />
<br />
<button @onclick="SaveVendor">Speichern</button>

<p>
    <NavLink href="/vendor/backup/restore">Daten widerherstellen</NavLink>
</p>

<style>
    .alert {
        padding: 15px;
        margin-top: 10px;
        border-radius: 5px;
        display: flex;
        align-items: center;
    }
    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .icon-error::before {
        content: "❌";
        margin-right: 10px;
    }
</style>

@code {

    private string inputName;

    private string signedInputName;

    private ValidityState vendorLicenseState = ValidityState.NoSignature;

    private async Task SaveVendor()
    {
        var isValid = await JS.InvokeAsync<bool>("cryptoHelper.verifySignature", GlobalConstants.ThinkexceptionPublicKey, inputName, signedInputName);
        var isTrailLicense = inputName.StartsWith("#T#") && inputName.EndsWith("#T#");

        if (!isValid && !isTrailLicense)
        {
            vendorLicenseState = ValidityState.InvalidSignature;
            StateHasChanged();
            return;
        }

        var keyPair = await JS.InvokeAsync<KeyPair>("cryptoHelper.generateKeyPair");

        var vendor = new VendorData
        {
            Name = inputName,
            PrivateKey = keyPair.PrivateKey,
            PublicKey = keyPair.PublicKey,
            SignedVendorName = signedInputName
        };

        var vendorJson = System.Text.Json.JsonSerializer.Serialize(vendor);
        await JS.InvokeVoidAsync("localStorage.setItem", "NonTrackingCustomerCard.Client.Vendor", vendorJson);
      
        Navigation.NavigateTo("/vendor");
    }


}