@page "/customer/backup/create"

@using NonTrackingCustomerCard.Client.Contracts
@using NonTrackingCustomerCard.Client.Repositories

@inject ICustomersRepository CustomerRepository
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Meine Daten sichern</h3>

<p>
    Hier können Sie Ihre Kundendaten sichern. Kopieren Sie den folgenden Text und speichern Sie ihn an einem sicheren Ort.
</p>

<div class="textarea-container">
    <InputTextArea  @ref="backupJson" @bind-Value="customerDataJson" />
</div>

<div class="alert alert-danger">
    <span class="icon-error">GEFAHRENZONE!! Hier haben Sie die Möglichkeit Ihre Kundenkarte zu löschen. Das kann man nicht rückgängig machen.</span> 
</div>
<div class="alert alert-danger">
    <button @onclick="DeleteCustomer">Kundenkarte löschen</button>
</div>

<style>
  html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
    .textarea-container {
        height: calc(100vh - 350px); /* Adjust the height to account for the header */
        display: flex;
        flex-direction: column;
    }
    textarea {
        flex: 1;
        width: 100%;
        height: 100%;
        box-sizing: border-box;
        padding: 10px;
        font-size: 16px;
    }
    .alert {
        padding: 15px;
        margin-top: 10px;
        border-radius: 5px;
        display: flex;
        align-items: center;
    }
   
    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }
   
    .icon-error::before {
        content: "❌";
        margin-right: 10px;
    }
</style>

@code {
    private string customerDataJson;
    private InputTextArea backupJson;

    protected override async Task OnInitializedAsync()
    {
        var (hasCustomer, customerData) = await CustomerRepository.TryGetCustomerJson();

        if (hasCustomer)
        {
            customerDataJson = customerData;
        }
        else
        {
            Navigation.NavigateTo("/customer");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("window.HTMLTextAreaElement.prototype.select.call", backupJson.Element);
    }

    private async Task DeleteCustomer()
    {
        bool firstConfirmation = await JS.InvokeAsync<bool>("confirm", "Sind sie sicher?");
        if (firstConfirmation)
        {
            bool secondConfirmation = await JS.InvokeAsync<bool>("confirm", "Sind sie WIRKLICH sicher?");
            if (secondConfirmation)
            {
                bool thirdConfirmation = await JS.InvokeAsync<bool>("confirm", "Ein letztes mal: sind sie WIRKLICH WIRKLICH sicher?");
                if (thirdConfirmation)
                {
                    await CustomerRepository.DeleteCustomerData();
                    Navigation.NavigateTo("/");
                }
            }

        }
    }
}