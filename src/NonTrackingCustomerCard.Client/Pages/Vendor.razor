@page "/vendor"
@using System.Security.Cryptography
@using NonTrackingCustomerCard.Client.Contracts
@using NonTrackingCustomerCard.Client.Repositories

@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IVendorRepository VendorRepository

@if (vendorLicenseState == ValidityState.InvalidSignature)
{
    <div class="alert alert-danger">
        <span class="icon-error">Unlizensierter Händler.</span> 
    </div>
}

<h3>@vendorOfCustomer.Name</h3>


<canvas id="qrcode" class="qr-code-container" @onclick="ScanCustomer"></canvas>

<p>
    Auf den QR-Code klicken, um eine Kundenkarte zu scannen.
</p>

<p>
    <NavLink href="/vendor/backup/create">Meine Daten sichern</NavLink>
</p>

<style>
    @* html, body, article  {
        height: 100%;
        margin: 0;
    }
    .qr-code-container {
        width: 100%;
        height: 100%;
        object-fit: contain;
    } *@
    html, body, .qr-code-container {
        height: 100%;
        margin: 0;
    }
    .qr-code-container {
        display: flex;
        justify-content: center;
        align-items: top;
        max-width: 80vmin; /* 80% of the smaller dimension (viewport width or height) */
        max-height: 80vmin; /* 80% of the smaller dimension (viewport width or height) */
    }
    canvas {
        width: 100%;
        height: 100%;
    }
    .alert {
        padding: 15px;
        margin-top: 10px;
        border-radius: 5px;
        display: flex;
        align-items: center;
    }
    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }
    .icon-error::before {
        content: "❌";
        margin-right: 10px;
    }
</style>

@code {
    private VendorPublicData vendorOfCustomer = new();
    private ValidityState vendorLicenseState;
    
    protected override async Task OnInitializedAsync()
    {
        var (hasVendor, _) = await VendorRepository.TryGetVendorJson();
        if (hasVendor)
        {
            vendorOfCustomer = await VendorRepository.GetVendorPublicData();
            var vendor = await VendorRepository.GetVendorData();
            var isValid = await JS.InvokeAsync<bool>("cryptoHelper.verifySignature", GlobalConstants.ThinkexceptionPublicKey, vendor.Name, vendor.SignedVendorName);
            vendorLicenseState = isValid ? ValidityState.ValidSignature : ValidityState.InvalidSignature;
        }
        else
        {
            Navigation.NavigateTo("/vendor/create");
        }
    }

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("qrGenerator.initializeQrCode", "qrcode");
        }

        if (vendorOfCustomer != null)
            await JS.InvokeAsync<string>("qrGenerator.generateQrCode", vendorOfCustomer);
    }

    private async Task ScanCustomer()
    {
         Navigation.NavigateTo($"/vendor/scancustomer");
    }

}    