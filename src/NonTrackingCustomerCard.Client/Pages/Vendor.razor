@page "/vendor"
@using System.Security.Cryptography
@using NonTrackingCustomerCard.Client.Contracts
@using NonTrackingCustomerCard.Client.Repositories

@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IVendorRepository VendorRepository

<h3>@vendorOfCustomer.Name</h3>


<canvas id="qrcode" class="qr-code-container" @onclick="ScanCustomer"></canvas>

<p>
    Auf den QR-Code klicken, um eine Kundenkarte zu scannen.
</p>

<p>
    <NavLink href="/vendor/backup/create">Meine Daten sichern</NavLink>
</p>

<style>
    html, body, article  {
        height: 100%;
        margin: 0;
    }
    .qr-code-container {
        width: 100%;
        height: 100%;
        object-fit: contain;
    }
</style>

@code {
    private VendorOfCustomerData vendorOfCustomer = new();
    
    protected override async Task OnInitializedAsync()
    {
        var (hasVendor, _) = await VendorRepository.TryGetVendorJson();
        if (hasVendor)
        {
            vendorOfCustomer = await VendorRepository.GetVendorPublicData();
        }
        else
        {
            Navigation.NavigateTo("/vendor/create");
        }
    }

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("qrGenerator.initializeQrCode", "qrcode");
        }

        if (vendorOfCustomer != null)
            await JS.InvokeAsync<string>("qrGenerator.generateQrCode", vendorOfCustomer);
    }

    private async Task ScanCustomer()
    {
         Navigation.NavigateTo($"/vendor/scancustomer");
    }

}    