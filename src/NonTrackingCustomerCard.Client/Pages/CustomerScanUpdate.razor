@page "/customer/scanupdate"

@using System.Security.Cryptography
@using NonTrackingCustomerCard.Client.Contracts

@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Neuen Punktestand scannen</h3>

@if (scannedCustomerData != null)
{
    <h4>Neuer Punktestand:</h4>

    if (validityState == ValidityState.ValidSignature)
    {
        <div class="alert alert-success">
            <span class="icon-checkmark">Die Angaben des Händlers sind gültig.</span>
        </div>
    }
    else if (validityState == ValidityState.InvalidSignature)
    {
        <div class="alert alert-danger">
            <span class="icon-error">Die Angaben des Händlers können nicht überprüft werden.</span> 
        </div>
    }

    <div>
        <label for="points">Punkte:</label>
        <span type="number" id="points">@scannedCustomerData.Customer.Points</span>
        <button autofocus @onclick="SaveCustomerData">Speichern</button>
    </div>
}
else
{
    <video id="qrScanner"></video>
}

<style>
    .alert {
        padding: 15px;
        margin-top: 10px;
        border-radius: 5px;
        display: flex;
        align-items: center;
    }
    .alert-warning {
        background-color: #fff3cd;
        color: #856404;
    }
    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }
    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }
    .icon-warning::before {
        content: "⚠️";
        margin-right: 10px;
    }
    .icon-checkmark::before {
        content: "✅";
        margin-right: 10px;
    }
    .icon-error::before {
        content: "❌";
        margin-right: 10px;
    }
</style>

@code {

    private CustomerDataWithSignature scannedCustomerData;
    private ValidityState validityState;

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("qrScanHelper.startScan", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnQrCodeScanned(string qrCodeData)
    {
        await JS.InvokeVoidAsync("qrScanHelper.stopScan");

        Console.WriteLine($"Original QR Code Data: {qrCodeData}");

        // Ensure the string is properly formatted
        var json = qrCodeData.Trim().Trim('\'').Replace("'", "\"");
        Console.WriteLine($"Formatted JSON: {json}");

        try
        {
            var deserializedData = System.Text.Json.JsonSerializer.Deserialize<CustomerDataWithSignature>(json, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (deserializedData != null)
            {
                // Retrieve the vendor's public key from the deserialized data
                var customerJson = await JS.InvokeAsync<string>("localStorage.getItem", "NonTrackingCustomerCard.Client.Customer");
                var customerOfVendor = System.Text.Json.JsonSerializer.Deserialize<CustomerOfVendorData>(customerJson) ?? new CustomerOfVendorData();;
                var publicKey = customerOfVendor.OfVendor.PublicKey;    
                var data = System.Text.Json.JsonSerializer.Serialize(deserializedData.Customer);

                // Verify the signature
                var isValid = await JS.InvokeAsync<bool>("cryptoHelper.verifySignature", publicKey, data, deserializedData.Signature);
                validityState = isValid ? ValidityState.ValidSignature : ValidityState.InvalidSignature;
                scannedCustomerData = deserializedData;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Deserialized data is null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Deserialization failed: {ex.Message}");
        }
    }
    
    private async Task SaveCustomerData(MouseEventArgs e)
    {
        var customerJson = await JS.InvokeAsync<string>("localStorage.getItem", "NonTrackingCustomerCard.Client.Customer");
        var customerOfVendor = System.Text.Json.JsonSerializer.Deserialize<CustomerOfVendorData>(customerJson) ?? new CustomerOfVendorData();;
        customerOfVendor.Customer = scannedCustomerData.Customer;
        customerOfVendor.Signature = scannedCustomerData.Signature;

        customerJson = System.Text.Json.JsonSerializer.Serialize(customerOfVendor);
        await JS.InvokeVoidAsync("localStorage.setItem", "NonTrackingCustomerCard.Client.Customer", customerJson);
        Navigation.NavigateTo("/customer");
    }
}