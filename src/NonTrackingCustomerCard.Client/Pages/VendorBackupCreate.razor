@page "/vendor/backup/create"

@using NonTrackingCustomerCard.Client.Contracts
@using NonTrackingCustomerCard.Client.Repositories

@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IVendorRepository VendorRepository

<h3>Meine Daten sichern</h3>

<p>
    Hier können Sie Ihre Händlerdaten sichern. Kopieren Sie den folgenden Text und speichern Sie ihn an einem sicheren Ort.
</p>

<div class="textarea-container">
    <InputTextArea  @ref="backupJson" @bind-Value="vendorDataJson" />
</div>


<div class="alert alert-danger">
    <span class="icon-error">GEFAHRENZONE!! Hier haben Sie die Möglichkeit Ihre Händerldaten zu löschen. Sie sind nicht mehr in der Lage die Karten ihrer Kunden zu verarbeiten. Das kann man nicht rückgängig machen.</span> 
</div>
<div class="alert alert-danger">
    <button @onclick="DeleteVendor">Kundenkarte löschen</button>
</div>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
    .textarea-container {
        height: calc(100vh - 350px); /* Adjust the height to account for the header */
        display: flex;
        flex-direction: column;
    }
    textarea {
        flex: 1;
        width: 100%;
        height: 100%;
        min-height: 200px; /* Set a minimum height for the textarea */
        box-sizing: border-box;
        padding: 10px;
        font-size: 16px;
    }
    .alert {
        padding: 15px;
        margin-top: 10px;
        border-radius: 5px;
        display: flex;
        align-items: center;
    }
   
    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }
   
    .icon-error::before {
        content: "❌";
        margin-right: 10px;
    }
</style>

@code {
    private string vendorDataJson;
    private InputTextArea backupJson;

    protected override async Task OnInitializedAsync()
    {
        var (hasVendor, vendorData) = await VendorRepository.TryGetVendorJson();

        if (hasVendor)
        {
            vendorDataJson = vendorData;
        }
        else
        {
            Navigation.NavigateTo("/vendor");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("window.HTMLTextAreaElement.prototype.select.call", backupJson.Element);
    }

    private async Task DeleteVendor()
    {
        bool firstConfirmation = await JS.InvokeAsync<bool>("confirm", "Sind sie sicher?");
        if (firstConfirmation)
        {
            bool secondConfirmation = await JS.InvokeAsync<bool>("confirm", "Sind sie WIRKLICH sicher?");
            if (secondConfirmation)
            {
               bool thirdConfirmation = await JS.InvokeAsync<bool>("confirm", "Lieber nicht löschen? Abbrechen klicken um endgültig zu löschen.");
                if (!thirdConfirmation)
                {
                    await VendorRepository.DeleteVendorData();
                    Navigation.NavigateTo("/");
                }
            }

        }
    }
}