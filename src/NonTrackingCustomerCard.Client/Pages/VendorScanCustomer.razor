@page "/vendor/scancustomer"

@using System.Security.Cryptography
@using NonTrackingCustomerCard.Client.Contracts

@inject NavigationManager Navigation
@inject IJSRuntime JS

<NavigationLock ConfirmExternalNavigation="false" OnBeforeInternalNavigation="@OnBeforeInternalNavigation"></NavigationLock>


@if (scannedCustomerData != null && !showQrCode)
{
    <h3>Zahlbetrag oder neuen Punktestand eingeben</h3>

    @if (validityState == ValidityState.NoSignature)
    {
        <div class="alert alert-warning">
            <span class="icon-warning">Die Angaben können nicht geprüft werden. Ist dies ein neuer Kunde?</span> 
        </div>
    }
    else if (validityState == ValidityState.ValidSignature)
    {
        <div class="alert alert-success">
            <span class="icon-checkmark">Die Angaben des Kunden sind gültig.</span>
        </div>
    }
    else if (validityState == ValidityState.InvalidSignature)
    {
        <div class="alert alert-danger">
            <span class="icon-error">Die Angaben des Kunden können nicht überprüft werden.</span> 
        </div>
    }

    <div class="input-container">
        <label for="currentPoints">Aktueller Punktestand:</label>
        <input id="currentPoints" @bind-value="scannedCustomerData.Customer.Points" readonly/>
        <br />

        <label for="amountToPay">Zahlbetrag:</label>
        <InputNumber id="amountToPay" autofocus
            @ref="amountToPayInput" 
            @bind-Value="amountToPay" 
            @oninput="CalculatePoints" 
            @onfocus="@(e => SelectAll(amountToPayInput.Element))" 
            @onkeyup="HandleEnter" /> 
        <br />

        <label for="points">Neue Punktestand:</label>
        <InputNumber id="points" 
            @ref="newPointsInput" 
            @bind-Value="newPoints" 
            @onfocus="@(e => SelectAll(newPointsInput.Element))" 
            @onkeyup="HandleEnter" />
        <br />

        <label for="discountedAmountToPay">Rabattierter Zahlbetrag:</label>
        <input id="discountedAmountToPay" @bind-value="discountedAmountToPay" readonly />
        <br />

        <button @onclick="SaveCustomerData">Speichern</button>
    </div>

}
else if (scannedCustomerData != null && showQrCode)
{
    <h3>Diesen QR-Code QR-Code scannen um den Punktestand zu aktualisieren</h3>

    <h4>Neuer Punktestand: @scannedCustomerData.Customer.Points</h4>
    <canvas id="qrcode" class="qr-code-container" @onclick="ScanNextCustomer"></canvas>

    <p>
        Auf den QR-Code klicken um die nächste Kundenkarte zu scannen.
    </p>
}
else
{
    <h3>Kundenkarte scannen</h3>

    <video id="qrScanner"></video>
}

<style>
    html, body, .qr-code-container {
        height: 100%;
        margin: 0;
    }
    .qr-code-container {
        display: flex;
        justify-content: center;
        align-items: center;
        max-width: 85vmin; 
        max-height: 85vmin; 
    }
    canvas {
        width: 100%;
        height: 100%;
    }

    .alert {
        padding: 15px;
        margin-top: 10px;
        border-radius: 5px;
        display: flex;
        align-items: center;
    }
    .alert-warning {
        background-color: #fff3cd;
        color: #856404;
    }
    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }
    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }
    .icon-warning::before {
        content: "⚠️";
        margin-right: 10px;
    }
    .icon-checkmark::before {
        content: "✅";
        margin-right: 10px;
    }
    .icon-error::before {
        content: "❌";
        margin-right: 10px;
    }
    .hidden {
        display: none;
    }

    .input-container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }
    .input-container label {
        width: 100%;
        margin-bottom: 5px;
    }
    .input-container input,
    .input-container .input-number {
        width: 100%;
        height: 40px;
        margin-bottom: 10px;
        padding: 5px;
        font-size: 16px;
        box-sizing: border-box;
    }
    .input-container button {
        width: 100%;
        height: 50px;
        font-size: 18px;
    }
</style>

@code {

    private decimal amountToPay;
    private InputNumber<decimal> amountToPayInput;
    private int newPoints;
    private InputNumber<int> newPointsInput;
    private double discountedAmountToPay;
    private CustomerDataWithSignature scannedCustomerData;
    private ValidityState validityState;

    private bool showQrCode;
    private bool selectAll;

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        if (scannedCustomerData == null)
        {
            await JS.InvokeVoidAsync("qrScanHelper.startScan", DotNetObjectReference.Create(this));
        }

        if (scannedCustomerData != null )
        {
            if (selectAll)
            {
                selectAll = false;
            }

           if (showQrCode)
           {
                await JS.InvokeVoidAsync("qrGenerator.initializeQrCode", "qrcode");
                await JS.InvokeAsync<string>("qrGenerator.generateQrCode", scannedCustomerData);
           }
        }
    }

    [JSInvokable]
    public async Task OnQrCodeScanned(string qrCodeData)
    {
        await JS.InvokeVoidAsync("qrScanHelper.stopScan");

        Console.WriteLine($"Original QR Code Data: {qrCodeData}");

        // Ensure the string is properly formatted
        var json = qrCodeData.Trim().Trim('\'').Replace("'", "\"");
        Console.WriteLine($"Formatted JSON: {json}");

        try
        {
            var deserializedData = System.Text.Json.JsonSerializer.Deserialize<CustomerDataWithSignature>(json, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (deserializedData != null)
            {
                // Verify the signature
                if (string.IsNullOrWhiteSpace(deserializedData.Signature))
                {
                    validityState = ValidityState.NoSignature;
                }
                else
                {
                    var vendorJson = await JS.InvokeAsync<string>("localStorage.getItem", "NonTrackingCustomerCard.Client.Vendor");
                    var vendor = System.Text.Json.JsonSerializer.Deserialize<VendorData>(vendorJson);
                    var publicKey = vendor.PublicKey;
                    var data = System.Text.Json.JsonSerializer.Serialize(deserializedData.Customer);
                    var isValid = await JS.InvokeAsync<bool>("cryptoHelper.verifySignature", publicKey, data, deserializedData.Signature);
                    validityState = isValid ? ValidityState.ValidSignature : ValidityState.InvalidSignature;
                }

                scannedCustomerData = deserializedData;
                selectAll = true;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Deserialized data is null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Deserialization failed: {ex.Message}");
        }
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "NumpadEnter")
        {
            await SaveCustomerData(null);
        }
    }

    private async Task SelectAll(ElementReference? e)
    {
        await JS.InvokeVoidAsync("window.HTMLInputElement.prototype.select.call", e);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        await JS.InvokeVoidAsync("qrScanHelper.stopScan", DotNetObjectReference.Create(this));
    }

    private async Task CalculatePoints(ChangeEventArgs e)
    {
        if (!double.TryParse(e.Value.ToString(), out var amount))
            return;

        var discount = 0.03;
        var additionalPoints = (int)amount;
        var discountAmounts = 0;

        if (additionalPoints > 100)
        {
            discountAmounts++;
            additionalPoints = additionalPoints % 100;
        }
           
        if (scannedCustomerData.Customer.Points + additionalPoints > 100)
        {
            newPoints = scannedCustomerData.Customer.Points;
            var pointsTo100 = 100 - newPoints;
            var residualPoints = newPoints + additionalPoints - 100;
            additionalPoints -= pointsTo100;
            newPoints = residualPoints;
            discountAmounts++;
        }
        else
        {
            newPoints = scannedCustomerData.Customer.Points + additionalPoints;
        }
        
        discountedAmountToPay = amount * (Math.Pow((1 - discount), discountAmounts));
    }

    private async Task SaveCustomerData(MouseEventArgs e)
    {
        scannedCustomerData.Customer.Points = newPoints;
        scannedCustomerData.Customer.Timestamp = DateTime.Now.Ticks;

        // Retrieve private key from local storage
        var vendorJson = await JS.InvokeAsync<string>("localStorage.getItem", "NonTrackingCustomerCard.Client.Vendor");
        var vendor = System.Text.Json.JsonSerializer.Deserialize<VendorData>(vendorJson);

        // Sign the hash of the customer data
        var customerJson = System.Text.Json.JsonSerializer.Serialize(scannedCustomerData.Customer);
        var signature = await JS.InvokeAsync<string>("cryptoHelper.signData", vendor.PrivateKey, customerJson);

        // Update the signature in the scanned customer data
        scannedCustomerData.Signature = signature;
        showQrCode = true;
        StateHasChanged();
    }

    private async Task ScanNextCustomer(MouseEventArgs e)
    {
        //Navigation.NavigateTo("/vendor");
        scannedCustomerData = null;
        showQrCode = false;
        StateHasChanged();
    }
}